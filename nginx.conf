events {
  worker_connections 1024;
}

http {
  # Upstream services avec load balancing
  upstream article_service {
    least_conn;
    server 172.168.1.20:3005 max_fails=3 fail_timeout=30s; # articleService1
    server 172.168.2.20:3005 max_fails=3 fail_timeout=30s; # articleService2
  }
  
  upstream client_service {
    least_conn;
    server 172.168.1.21:3000 max_fails=3 fail_timeout=30s; # clientService1
    server 172.168.2.21:3000 max_fails=3 fail_timeout=30s; # clientService2
  }
  
  upstream commande_service {
    least_conn;
    server 172.168.1.22:3003 max_fails=3 fail_timeout=30s; # commandeService1
    server 172.168.2.22:3003 max_fails=3 fail_timeout=30s; # commandeService2
  }
  
  upstream livreur_service {
    least_conn;
    server 172.168.1.23:3004 max_fails=3 fail_timeout=30s; # livreurService1
    server 172.168.2.23:3004 max_fails=3 fail_timeout=30s; # livreurService2
  }
  
  upstream menu_service {
    least_conn;
    server 172.168.1.24:3006 max_fails=3 fail_timeout=30s; # menuService1
    server 172.168.2.24:3006 max_fails=3 fail_timeout=30s; # menuService2
  }
  
  upstream restaurateur_service {
    least_conn;
    server 172.168.1.25:3001 max_fails=3 fail_timeout=30s; # restaurateurService1
    server 172.168.2.25:3001 max_fails=3 fail_timeout=30s; # restaurateurService2
  }
  
  upstream commentaire_service {
    least_conn;
    server 172.168.1.26:3007 max_fails=3 fail_timeout=30s; # commentaireService1
    server 172.168.2.26:3007 max_fails=3 fail_timeout=30s; # commentaireService2
  }
  
  upstream components_service {
    least_conn;
    server 172.168.1.27:3002 max_fails=3 fail_timeout=30s; # componentService1
    server 172.168.2.27:3002 max_fails=3 fail_timeout=30s; # componentService2
  }
  
  upstream log_service {
    least_conn;
    server 172.168.1.28:3008 max_fails=3 fail_timeout=30s; # logService1
    server 172.168.2.28:3008 max_fails=3 fail_timeout=30s; # logService2
  }
  
  # Upstreams pour les frontends
  upstream client_frontend_prod {
    ip_hash;
    server 172.168.1.10:80 max_fails=3 fail_timeout=30s; # clientFrontendProd1
    server 172.168.2.10:80 max_fails=3 fail_timeout=30s; # clientFrontendProd2
  }
  
  upstream restaurateur_frontend_prod {
    ip_hash;
    server 172.168.1.11:80 max_fails=3 fail_timeout=30s; # restaurateurFrontendProd1
    server 172.168.2.11:80 max_fails=3 fail_timeout=30s; # restaurateurFrontendProd2
  }
  
  upstream commercial_frontend_prod {
    ip_hash;
    server 172.168.1.12:80 max_fails=3 fail_timeout=30s; # commercialFrontendProd1
    server 172.168.2.12:80 max_fails=3 fail_timeout=30s; # commercialFrontendProd2
  }
  
  upstream developer_frontend_prod {
    ip_hash;
    server 172.168.1.13:80 max_fails=3 fail_timeout=30s; # developerFrontendProd1
    server 172.168.2.13:80 max_fails=3 fail_timeout=30s; # developerFrontendProd2
  }
  
  upstream technical_frontend_prod {
    ip_hash;
    server 172.168.1.14:80 max_fails=3 fail_timeout=30s; # technicalFrontendProd1
    server 172.168.2.14:80 max_fails=3 fail_timeout=30s; # technicalFrontendProd2
  }
  
  upstream livreur_frontend_prod {
    ip_hash;
    server 172.168.1.15:80 max_fails=3 fail_timeout=30s; # livreurFrontendProd1
    server 172.168.2.15:80 max_fails=3 fail_timeout=30s; # livreurFrontendProd2
  }
  
  # Dozzle
  upstream dozzle { 
    server 172.168.1.3:8080;
  }

  # SSL Settings
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;
  ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 10m;

  # HTTP server - redirects to HTTPS
  server {
    listen 8080;
    server_name yourdomainname.com;
    
    # Redirect all HTTP traffic to HTTPS
    location / {
      return 301 https://$host$request_uri;
    }
  }

  # HTTPS server
  server {
    listen 443 ssl;
    server_name cesieat.nathan-lorit.com;
    
    # SSL certificate files
    ssl_certificate /etc/nginx/certs/your_certificate.crt;
    ssl_certificate_key /etc/nginx/certs/your_private_key.key;
    
    # Error log for debugging
    error_log /var/log/nginx/error.log;

    # Helper for WebSocket configuration
    set $websocket_headers "
      proxy_http_version 1.1;
      proxy_set_header Upgrade \$http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host \$host;
      proxy_set_header X-Real-IP \$remote_addr;
      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto \$scheme;
      proxy_read_timeout 86400;
    ";

    # Frontend routes
    location / {
      proxy_pass http://client_frontend_prod;
    }
    location /client/ { proxy_pass http://client_frontend_prod/client/; }
    location /restaurateur/ { proxy_pass http://restaurateur_frontend_prod/restaurateur/; }
    location /livreur/ { proxy_pass http://livreur_frontend_prod/livreur/;  }

    location /commercial/ { proxy_pass http://commercial_frontend_prod/commercial/;  }

    location /technical/ { proxy_pass http://technical_frontend_prod/technical/; }
    location /developer/ { proxy_pass http://developer_frontend_prod/developer/; }

    # API routes
    location /api/articles { proxy_pass http://article_service/api/articles; }
    location /api/clients { proxy_pass http://client_service/api/clients; }
    location /api/commandes { proxy_pass http://commande_service/api/commandes; }
    location /api/livreurs { proxy_pass http://livreur_service/api/livreurs; }
    location /api/menus { proxy_pass http://menu_service/api/menus; }
    location /api/restaurateurs { proxy_pass http://restaurateur_service/api/restaurateurs; }
    location /api/commentaires { proxy_pass http://commentaire_service/api/commentaires; }
    location /api/components { proxy_pass http://components_service/api/components; }
    location /api/logs { proxy_pass http://log_service/api/logs; }

    # Ajout: Route pour servir les fichiers téléchargés
    location /downloads/ {
      # Rediriger directement vers le service, en modifiant légèrement l'URL
      proxy_pass http://components_service/downloads/;
      
      # Désactiver la mise en cache pour le débogage
      add_header Cache-Control "no-store, no-cache, must-revalidate";
      
      # Reste des configurations inchangées
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      
      # Pour permettre le téléchargement de fichiers volumineux
      client_max_body_size 100M;
      proxy_read_timeout 600s;
    }

    # Modifier la section des téléchargements
    location /api/components/download/ {
      proxy_pass http://components_service/api/components/download/;
      
      # Désactiver la mise en cache pour le débogage
      add_header Cache-Control "no-store, no-cache, must-revalidate";
      
      # Reste des configurations inchangées
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      
      # Pour permettre le téléchargement de fichiers volumineux
      client_max_body_size 100M;
      proxy_read_timeout 600s;
    }

    # Dozzle
    location /dozzle/ {
      proxy_pass http://dozzle/;
      
      # Configuration WebSocket nécessaire pour Dozzle
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      
      # Headers standards pour proxy
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      
      # Augmenter les timeouts pour les connexions longues
      proxy_read_timeout 3600;
      proxy_send_timeout 3600;
      proxy_connect_timeout 3600;
      
      # Désactiver la mise en tampon pour le streaming en temps réel
      proxy_buffering off;
    }

    # Generic API fallback
    location /api { return 404; }
  }
}
