services:
  nginx:
    image: nginx:latest
    container_name: gateway
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./websocket.conf:/etc/nginx/websocket.conf:ro # Ajoutez cette ligne
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - article-service
      - client-service
      - commande-service
      - livreur-service
      - menu-service
      - restaurateur-service

  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 8081:8080
    networks:
      - app-network
    restart: unless-stopped




  # Client frontend (Production)
  client-frontend-prod:
    build:
      context: ./frontend/clientfront/client
      dockerfile: Dockerfile.prod
    container_name: clientFrontendProd
    ports:
      - "3080:80"  # Exposez le port 80 de nginx sur le port 3080 de l'h么te
    restart: unless-stopped
    networks:
      - app-network
  
  # Restaurant frontend (Production)
  restaurateur-frontend-prod:
    build:
      context: ./frontend/restaurateurfront/restaurateur
      dockerfile: Dockerfile.prod
    container_name: restaurateurFrontendProd
    ports:
      - "3081:80"  # Exposez le port 80 de nginx sur le port 3081 de l'h么te
    restart: unless-stopped
    networks:
      - app-network
  
 # Livreur frontend (Vite project)
  livreur-frontend:
    build:
      context: ./frontend/livreurfront/livreur
      dockerfile: Dockerfile
    container_name: livreurFrontend
    ports:
      - "5175:5175" # Expose Vite default port for livreur frontend
    environment:
      - HOST=0.0.0.0 # Ensure external access
      - VITE_REDIRECT_URI_RESTAURATEUR=http://localhost:8080/livreur/
    volumes:
      - ./frontend/livreurfront/livreur:/app # Sync local code with container
      - /app/node_modules # Isolate node_modules from local setup
    restart: unless-stopped

    networks:
      - app-network
    command: npm run dev # Run Vite in development mode
    

  # Commercial frontend (Vite project)
  commercial-frontend:
    build:
      context: ./frontend/commercialfront/commercial
      dockerfile: Dockerfile
    container_name: commercialFrontend
    ports:
      - "5178:5178" # Expose Vite default port for commercial frontend
    environment:
      - HOST=0.0.0.0 # Ensure external access
      - VITE_REDIRECT_URI_RESTAURATEUR=http://localhost:8080/commercial/
    volumes:
      - ./frontend/commercialfront/commercial:/app # Sync local code with container
      - /app/node_modules # Isolate node_modules from local setup
    networks:
      - app-network
    restart: unless-stopped
  
# Developer frontend (Production)
  developer-frontend-prod:
    build:
      context: ./frontend/developerfront/developer
      dockerfile: Dockerfile.prod
    container_name: developerFrontendProd
    ports:
      - "3084:80"  # Exposez le port 80 de nginx sur le port 3084 de l'h么te
    restart: unless-stopped
    networks:
      - app-network
  
  # Technical frontend (Production)
  technical-frontend-prod:
    build:
      context: ./frontend/technicalfront/technical
      dockerfile: Dockerfile.prod
    container_name: technicalFrontendProd
    ports:
      - "3085:80"  # Exposez le port 80 de nginx sur le port 3085 de l'h么te
    restart: unless-stopped
    networks:
      - app-network


  # Commercial frontend (Vite project)




  # Article Service
  article-service:
    build:
      context: ./services/articleService
      dockerfile: Dockerfile
    container_name: articleService
    ports:
      - "3005:3000"
    restart: unless-stopped

    networks:
      - app-network

  # Client Service
  client-service:
    build:
      context: ./services/clientService
      dockerfile: Dockerfile
    container_name: clientService
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - app-network

  # Commande Service
  commande-service:
    build:
      context: ./services/commandeService
      dockerfile: Dockerfile
    container_name: commandeService
    restart: unless-stopped

    ports:
      - "3003:3000"
    networks:
      - app-network

  # Livreur Service
  livreur-service:
    build:
      context: ./services/livreurService
      dockerfile: Dockerfile
    container_name: livreurService
    restart: unless-stopped

    ports:
      - "3004:3000"
    networks:
      - app-network

  # Menu Service
  menu-service:
    build:
      context: ./services/menuService
      dockerfile: Dockerfile
    container_name: menuService
    restart: unless-stopped

    ports:
      - "3006:3000"
    networks:
      - app-network

  # Restaurateur Service
  restaurateur-service:
    build:
      context: ./services/restaurateurService
      dockerfile: Dockerfile
    container_name: restaurateurService
    restart: unless-stopped

    ports:
      - "3001:3000"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge # Ensures proper communication between services
